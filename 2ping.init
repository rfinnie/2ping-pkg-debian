#! /bin/sh
### BEGIN INIT INFO
# Provides:          2ping
# Required-Start:    $remote_fs $syslog $network $time
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts/stops the 2ping listener
# Description:       Allows 2ping to act as a listener daemon, needed
#                    for 2ping client/server operations.
### END INIT INFO

# Do NOT "set -e"

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="2ping listener"
NAME=2ping
DAEMON=/usr/bin/$NAME
DAEMON_ARGS="--listen -q"
PIDFILE=/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
ENVIRONMENTFILE=/etc/default/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Define LSB log_* functions.
. /lib/lsb/init-functions

# Default options, these can be overriden by the information
# at /etc/default/2ping
TWOPINGD_OPTS=""
TWOPINGD_USER=nobody

# Read configuration variable file if it is present
[ -r $ENVIRONMENTFILE ] && . $ENVIRONMENTFILE

# Silently ignore requests to start if not explicitly enabled
if [ "x$TWOPINGD_RUN" != "xyes" ] ; then
    exit 0
fi

DAEMON_ARGS="$DAEMON_ARGS $TWOPINGD_OPTS"
[ -n "$TWOPINGD_USER" ] || TWOPINGD_USER=root

#
# Function that starts the daemon/service
#
do_start() {
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    status_of_proc "$DAEMON" "$NAME" >/dev/null && return 1
    start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILE \
        --background --chuid $TWOPINGD_USER \
        --exec $DAEMON -- $DAEMON_ARGS \
        || return 2
}

#
# Function that stops the daemon/service
#
do_stop() {
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
        --pidfile $PIDFILE --name $NAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE

    return "$RETVAL"
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) log_end_msg 0 ;;
        2) log_end_msg 1 ;;
    esac
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) log_end_msg 0 ;;
        2) log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  reload)
    log_warning_msg "Reloading $NAME daemon: not implemented, as the daemon"
    log_warning_msg "cannot re-read the config file (use restart)."
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "$SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
